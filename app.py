# -*- coding: utf-8 -*-
import numpy as np
import pandas as pd
import streamlit as st
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score, classification_report
from sklearn.inspection import permutation_importance
import matplotlib.pyplot as plt
import seaborn as sns
import time

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="BotDetector PRO",
    page_icon="ü§ñ",
    layout="centered",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
st.markdown("""
<style>
    .header-style {
        font-size: 24px;
        font-weight: bold;
        color: #8e44ad;
    }
    .metric-value {
        font-size: 28px !important;
        font-weight: bold !important;
    }
    .bot-indicator {
        transition: all 0.5s ease;
    }
    .pulse-animation {
        animation: pulse 1.5s infinite;
    }
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }
    .feature-importance {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 15px;
        margin-top: 20px;
    }
</style>
""", unsafe_allow_html=True)

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
@st.cache_data
def train_model():
    try:
        df = pd.read_csv('bots_vs_users.csv')
    except FileNotFoundError:
        st.error("–§–∞–π–ª 'bots_vs_users.csv' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –Ω–∞–ª–∏—á–∏–µ –≤ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.")
        return None, None, 0, {}

    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df_v1 = df.loc[:, df.isna().mean() <= 0.5]
    subscribers_target = df_v1[['target', 'subscribers_count']]
    other_features = df_v1.drop(['target', 'subscribers_count'], axis=1)
    other_features = other_features.replace('Unknown', 3)
    df_v2 = pd.concat([subscribers_target, other_features], axis=1)
    df_v2 = df_v2.replace('Unknown', np.nan)
    df_v2['city'] = df_v2['city'].apply(lambda x: 0 if x == 3 else 1)
    df_v3 = df_v2.apply(lambda col: col.fillna(col.mode()[0]))
    df_final = df_v3.astype(float).astype(int)

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤
    Q1 = df_final['subscribers_count'].quantile(0.25)
    Q3 = df_final['subscribers_count'].quantile(0.75)
    IQR = Q3 - Q1
    low_limit = Q1 - 1.5 * IQR
    max_limit = Q3 + 1.5 * IQR
    data = df_final[(df_final['subscribers_count'] >= low_limit) &
                    (df_final['subscribers_count'] <= max_limit)]

    X = data.drop(['target'], axis=1)
    y = data['target']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

    pipeline = Pipeline([
        ('scaler', MinMaxScaler()),
        ('classifier', KNeighborsClassifier())
    ])
    pipeline.fit(X_train, y_train)

    y_pred = pipeline.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    report = classification_report(y_test, y_pred, output_dict=True)

    # –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å
    result = permutation_importance(pipeline, X_test, y_test, n_repeats=5, random_state=42)
    feature_weights = result.importances_mean

    return pipeline, X.columns, accuracy, report, feature_weights, X_test, y_test

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
def predict_bot(pipeline, features, input_values):
    input_df = pd.DataFrame([input_values], columns=features)
    scaled_input = pipeline.named_steps['scaler'].transform(input_df)
    return pipeline.named_steps['classifier'].predict_proba(scaled_input)[0][1]

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    st.markdown('<p class="header-style">BotDetector PRO</p>', unsafe_allow_html=True)
    st.caption("–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –±–æ—Ç–æ–≤ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö")

    with st.spinner('–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –±–æ—Ç–æ–≤...'):
        result = train_model()
        if result is None:
            return
        pipeline, features, accuracy, report, feature_weights, X_test, y_test = result

    # –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    with st.form("bot_form"):
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–∫–∫–∞—É–Ω—Ç–∞")
        input_values = {}
        cols = st.columns(2)

        with cols[0]:
            input_values['subscribers_count'] = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", min_value=0, value=500, key='subs')
            input_values['has_avatar'] = st.selectbox("–ê–≤–∞—Ç–∞—Ä–∫–∞", [1, 0], format_func=lambda x: "–î–∞" if x == 1 else "–ù–µ—Ç", key='avatar')
            input_values['has_cover'] = st.selectbox("–û–±–ª–æ–∂–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è", [1, 0], format_func=lambda x: "–î–∞" if x == 1 else "–ù–µ—Ç", key='cover')
            input_values['city'] = st.selectbox("–ì–æ—Ä–æ–¥ —É–∫–∞–∑–∞–Ω", [1, 0], format_func=lambda x: "–î–∞" if x == 1 else "–ù–µ—Ç", key='city')

        with cols[1]:
            input_values['verified'] = st.selectbox("–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω", [1, 0], format_func=lambda x: "–î–∞" if x == 1 else "–ù–µ—Ç", key='verified')
            input_values['posts_count'] = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤", min_value=0, value=100, key='posts')
            input_values['followers_to_following'] = st.number_input("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏/–ø–æ–¥–ø–∏—Å–∫–∏", min_value=0.0, value=1.5, key='ratio')
            input_values['digits_in_username'] = st.number_input("–¶–∏—Ñ—Ä—ã –≤ –∏–º–µ–Ω–∏", min_value=0, value=2, key='digits')

        submitted = st.form_submit_button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", type="primary")

    result_display = st.empty()

    if len(input_values) == len(features):
        try:
            bot_prob = predict_bot(pipeline, features, input_values)
            threshold = 0.5
            status = "–ë–û–¢" if bot_prob >= threshold else "–ù–∞—Å—Ç–æ—è—â–∏–π"
            status_color = "#e74c3c" if bot_prob >= threshold else "#2ecc71"
            pulse_class = "pulse-animation" if bot_prob >= threshold else ""

            with result_display.container():
                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏")
                col1, col2 = st.columns([3, 1])

                with col1:
                    st.markdown(f"""
                    <div class="bot-indicator {pulse_class}" style="margin-bottom: 1rem;">
                        <div style="font-size: 16px; color: #7f8c8d;">–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±–æ—Ç–∞</div>
                        <div class="metric-value" style="color: {status_color};">{bot_prob*100:.1f}%</div>
                        <div style="font-size: 14px; color: #7f8c8d;">–ü–æ—Ä–æ–≥: {threshold*100:.0f}%</div>
                        <div style="font-size: 14px; color: {status_color}; font-weight: bold;">–°—Ç–∞—Ç—É—Å: {status}</div>
                    </div>
                    """, unsafe_allow_html=True)

                with col2:
                    progress_bar = st.progress(0)
                    bot_prob_clipped = min(max(bot_prob, 0), 1)
                    for percent_complete in range(int(bot_prob_clipped * 100)):
                        time.sleep(0.01)
                        progress_bar.progress(percent_complete + 1)
                    progress_bar.progress(bot_prob_clipped)

                feat_importance = pd.DataFrame({
                    '–ü—Ä–∏–∑–Ω–∞–∫': features,
                    '–í–∞–∂–Ω–æ—Å—Ç—å': feature_weights
                }).sort_values('–í–∞–∂–Ω–æ—Å—Ç—å', ascending=False)

                plt.figure(figsize=(10, 6))
                sns.barplot(x='–í–∞–∂–Ω–æ—Å—Ç—å', y='–ü—Ä–∏–∑–Ω–∞–∫', data=feat_importance, palette='viridis')
                plt.title('–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–æ—Ç–æ–≤')
                plt.tight_layout()
                st.pyplot(plt)

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

    if submitted:
        st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤—ã—à–µ.")
        if bot_prob >= threshold:
            st.warning("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –±–æ—Ç–∞.")
        else:
            st.balloons()

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ")
        st.info("BotDetector PRO –∏—Å–ø–æ–ª—å–∑—É–µ—Ç KNN-–∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –±–æ—Ç–æ–≤.")

        st.markdown("---")
        st.write("üìä **–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏:**")
        st.metric("–¢–æ—á–Ω–æ—Å—Ç—å", f"{accuracy:.2%}")
        if '1' in report:
            st.metric("Precision (–±–æ—Ç–∞)", f"{report['1']['precision']:.2%}")
            st.metric("Recall (–±–æ—Ç–∞)", f"{report['1']['recall']:.2%}")

        st.markdown("---")
        st.write("**üìå –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**")
        st.write("1. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–∫–∫–∞—É–Ω—Ç–∞")
        st.write("2. –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        st.write("3. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç' –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")

if __name__ == "__main__":
    main()
