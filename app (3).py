import streamlit as st

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π)
st.set_page_config(
    page_title="Disney Princess Predictor",
    layout="centered",
    initial_sidebar_state="collapsed"
)

# –°—Ç–∏–ª–∏ CSS
st.markdown("""
<style>
    [data-testid="stAppViewContainer"] {
        overflow: hidden;
    }
    .stPlotContainer {
        position: relative;
    }
    .result-box {
        background:#f8f9fa;
        padding:1.5rem;
        border-radius:10px;
        text-align:center;
        margin:1rem 0;
    }
    .result-text {
        color: black !important;
        font-weight: bold;
        margin: 0;
    }
    .probability-text {
        color: black !important;
        margin:5px 0;
        font-size:14px;
    }
</style>
""", unsafe_allow_html=True)

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
import matplotlib.pyplot as plt
import seaborn as sns
import io

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    return pd.DataFrame({
        'NumberOfSongs': [4, 1, 3, 5, 6, 2, 4, 3],
        'HasSoloSong': [1, 0, 1, 0, 1, 0, 1, 0],
        'BoxOfficeMillions': [500, 300, 700, 200, 800, 350, 600, 400],
        'IMDB_Rating': [7.5, 6.8, 8.2, 6.5, 8.5, 7.0, 7.8, 6.9],
        'IsIconic': [1, 0, 1, 0, 1, 0, 1, 0]
    })

data = load_data()

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
@st.cache_resource
def train_model():
    X = data[['NumberOfSongs', 'HasSoloSong', 'BoxOfficeMillions', 'IMDB_Rating']]
    y = data['IsIconic']
    model = RandomForestClassifier(random_state=42)
    model.fit(X, y)
    return model

model = train_model()

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("‚ú® Disney Princess Predictor")

# –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
col1, col2 = st.columns(2)
with col1:
    songs = st.slider("üéµ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Å–µ–Ω", 0, 10, 3)
    solo = st.radio("üé§ –°–æ–ª—å–Ω–∞—è –ø–µ—Å–Ω—è?", ["–ù–µ—Ç", "–î–∞"]) == "–î–∞"
with col2:
    box_office = st.slider("üí∞ –ö–∞—Å—Å–æ–≤—ã–µ —Å–±–æ—Ä—ã ($ –º–ª–Ω)", 0, 2000, 500)
    rating = st.slider("‚≠ê –†–µ–π—Ç–∏–Ω–≥ IMDB", 0.0, 10.0, 7.0, step=0.1)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
if st.button("üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å"):
    input_data = pd.DataFrame([[songs, solo, box_office, rating]], 
                            columns=['NumberOfSongs', 'HasSoloSong', 'BoxOfficeMillions', 'IMDB_Rating'])
    
    try:
        prediction = model.predict(input_data)[0]
        proba = model.predict_proba(input_data)[0]
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç —Å —á–µ—Ä–Ω—ã–º —Ü–≤–µ—Ç–æ–º —Ç–µ–∫—Å—Ç–∞
        result = "üåü –ò–∫–æ–Ω–Ω–∞—è" if prediction == 1 else "üí´ –ù–µ –∏–∫–æ–Ω–Ω–∞—è"
        st.markdown(f"""
        <div class="result-box">
            <h3 class="result-text">{result}</h3>
            <p class="probability-text">–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: <strong>{max(proba)*100:.1f}%</strong></p>
        </div>
        """, unsafe_allow_html=True)
        
        # –ì—Ä–∞—Ñ–∏–∫
        fig, ax = plt.subplots(figsize=(4, 3))
        sns.barplot(x=['–ù–µ –∏–∫–æ–Ω–Ω–∞—è', '–ò–∫–æ–Ω–Ω–∞—è'], y=proba, palette="viridis", ax=ax)
        ax.set_ylabel("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å")
        plt.tight_layout()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ DOM
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=120, bbox_inches='tight')
        plt.close(fig)
        buf.seek(0)
        st.image(buf, use_container_width=True)
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")