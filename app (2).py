import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Disney Princess Classifier", 
    layout="centered",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª–∏ CSS
st.markdown("""
<style>
    .stButton>button {
        background-color: #4682B4;
        color: white;
        border-radius: 6px;
        padding: 10px 20px;
        font-weight: bold;
        border: none;
        transition: all 0.3s;
    }
    .stButton>button:hover {
        background-color: #3a6d99;
        transform: scale(1.02);
    }
    .prediction-box {
        background-color: #f0f0f0;
        padding: 1.5rem;
        border-radius: 10px;
        text-align: center;
        margin: 1rem 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.markdown("<h1 style='text-align: center; color: #FFD700;'>‚ú® Disney Princess Iconic Status Predictor</h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center; font-size: 18px;'>–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º, —Å—Ç–∞–Ω–µ—Ç –ª–∏ –ø—Ä–∏–Ω—Ü–µ—Å—Å–∞ –∫—É–ª—å—Ç–æ–≤–æ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ñ–∏–ª—å–º–∞.</p>", unsafe_allow_html=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    try:
        data = pd.DataFrame({
            'NumberOfSongs': [4, 1, 3, 5, 6, 2, 4, 3],
            'HasSoloSong': ['Yes', 'No', 'Yes', 'No', 'Yes', 'No', 'Yes', 'No'],
            'BoxOfficeMillions': [500, 300, 700, 200, 800, 350, 600, 400],
            'IMDB_Rating': [7.5, 6.8, 8.2, 6.5, 8.5, 7.0, 7.8, 6.9],
            'IsIconic': ['Yes', 'No', 'Yes', 'No', 'Yes', 'No', 'Yes', 'No']
        })
        return data
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return pd.DataFrame()

data = load_data()

if data.empty:
    st.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö.")
    st.stop()

# –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def preprocess_data(df):
    df = df.copy()
    binary_map = {'Yes': 1, 'No': 0}
    df['HasSoloSong'] = df['HasSoloSong'].map(binary_map).fillna(0)
    df['IsIconic'] = df['IsIconic'].map(binary_map).fillna(0)
    return df

data_processed = preprocess_data(data)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
@st.cache_resource
def train_model():
    try:
        X = data_processed[['NumberOfSongs', 'HasSoloSong', 'BoxOfficeMillions', 'IMDB_Rating']]
        y = data_processed['IsIconic']
        
        model = RandomForestClassifier(random_state=42)
        model.fit(X, y)
        return model
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {str(e)}")
        return None

model = train_model()

if model is None:
    st.stop()

# –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
st.markdown("### üé´ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–Ω—Ü–µ—Å—Å—ã")
inputs = {}
inputs['NumberOfSongs'] = st.slider("üéµ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Å–µ–Ω", 0, 10, 3)
inputs['HasSoloSong'] = st.radio("üé§ –°–æ–ª—å–Ω–∞—è –ø–µ—Å–Ω—è?", ["No", "Yes"]) == "Yes"
inputs['BoxOfficeMillions'] = st.slider("üí∞ –ö–∞—Å—Å–æ–≤—ã–µ —Å–±–æ—Ä—ã ($ –º–ª–Ω)", 0, 2000, 500)
inputs['IMDB_Rating'] = st.slider("‚≠ê –†–µ–π—Ç–∏–Ω–≥ IMDB", 0.0, 10.0, 7.0, step=0.1)

user_input = pd.DataFrame([inputs])

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
if st.button("üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å", key="predict_button"):
    try:
        prediction = model.predict(user_input)
        proba = model.predict_proba(user_input)

        result = "üåü –ò–∫–æ–Ω–Ω–∞—è" if prediction[0] == 1 else "üí´ –ù–µ –∏–∫–æ–Ω–Ω–∞—è"
        probability = f"{max(proba[0]) * 100:.1f}%"
        
        st.markdown(f"""
        <div class="prediction-box">
            <h3 style='color:#333;margin:0;'>{result}</h3>
            <p style='margin:5px 0;font-size:14px;'>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: <strong>{probability}</strong></p>
        </div>
        """, unsafe_allow_html=True)

        # –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        fig, ax = plt.subplots(figsize=(4, 3))
        sns.barplot(x=['–ù–µ –∏–∫–æ–Ω–Ω–∞—è', '–ò–∫–æ–Ω–Ω–∞—è'], y=proba[0], palette="Blues_r", ax=ax)
        ax.set_ylabel("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å")
        ax.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π", fontsize=12)
        plt.tight_layout()
        
        buf = io.BytesIO()
        plt.savefig(buf, format="png", dpi=150)
        buf.seek(0)
        st.image(buf, use_container_width=True)
        plt.close()
        
    except Exception as e:
        st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}")

# –°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
st.markdown("### üí° –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∏–Ω—Ü–µ—Å—Å—É –∏–∫–æ–Ω–∏—á–µ—Å–∫–æ–π?")
st.markdown("""
- üé∂ **–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –ø–µ—Å–µ–Ω** (–∏–¥–µ–∞–ª—å–Ω–æ 4+)
- üé§ **–°–æ–ª—å–Ω–∞—è –ø–µ—Å–Ω—è** –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å—ã
- üí∞ **–ö–∞—Å—Å–æ–≤—ã–µ —Å–±–æ—Ä—ã** > $500 –º–ª–Ω
- ‚≠ê **–†–µ–π—Ç–∏–Ω–≥ IMDB** –≤—ã—à–µ 7.5
- ü¶∏ **–°–∏–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä** –∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å
""")