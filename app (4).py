import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
import matplotlib.pyplot as plt
import seaborn as sns
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π)
st.set_page_config(
    page_title="Disney Princess Predictor",
    layout="centered",
    initial_sidebar_state="collapsed"
)

# –°—Ç–∏–ª–∏ CSS
st.markdown("""
<style>
    [data-testid="stAppViewContainer"] {
        overflow: hidden;
    }
    .stPlotContainer {
        position: relative;
    }
    .result-text {
        color: black !important;
        font-weight: bold;
    }
    .probability-text {
        color: black !important;
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("‚ú® Disney Princess Iconic Status Predictor")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö
        data = pd.read_csv("disney_princess_popularity_dataset_300_rows.csv")
        return data
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
        return pd.DataFrame({
            'NumberOfSongs': [4, 1, 3, 5],
            'HasSoloSong': ['Yes', 'No', 'Yes', 'No'],
            'BoxOfficeMillions': [500, 300, 700, 200],
            'IMDB_Rating': [7.5, 6.8, 8.2, 6.5],
            'IsIconic': ['Yes', 'No', 'Yes', 'No']
        })

data = load_data()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
if data.empty:
    st.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö.")
    st.stop()

# –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def preprocess_data(df):
    df = df.copy()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    binary_map = {'Yes': 1, 'No': 0}
    binary_cols = ['HasSoloSong', 'IsIconic']  # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –±–∏–Ω–∞—Ä–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    
    for col in binary_cols:
        if col in df.columns:
            df[col] = df[col].map(binary_map).fillna(0)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    num_cols = ['NumberOfSongs', 'BoxOfficeMillions', 'IMDB_Rating']
    for col in num_cols:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce').fillna(df[col].median())
    
    return df

data_processed = preprocess_data(data)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
@st.cache_resource
def train_model():
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ –≤–∞—à–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
        features = ['NumberOfSongs', 'HasSoloSong', 'BoxOfficeMillions', 'IMDB_Rating']
        X = data_processed[features]
        y = data_processed['IsIconic']
        
        model = RandomForestClassifier(random_state=42)
        model.fit(X, y)
        return model
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {str(e)}")
        return None

model = train_model()

if model is None:
    st.stop()

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
st.markdown("### üé´ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–Ω—Ü–µ—Å—Å—ã")

# –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
col1, col2 = st.columns(2)
with col1:
    songs = st.slider("üéµ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Å–µ–Ω", 0, 10, 3)
    solo = st.radio("üé§ –°–æ–ª—å–Ω–∞—è –ø–µ—Å–Ω—è?", ["No", "Yes"]) == "Yes"
with col2:
    box_office = st.slider("üí∞ –ö–∞—Å—Å–æ–≤—ã–µ —Å–±–æ—Ä—ã ($ –º–ª–Ω)", 0, 2000, 500)
    rating = st.slider("‚≠ê –†–µ–π—Ç–∏–Ω–≥ IMDB", 0.0, 10.0, 7.0, step=0.1)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
if st.button("üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å"):
    input_data = pd.DataFrame([[songs, solo, box_office, rating]], 
                            columns=['NumberOfSongs', 'HasSoloSong', 'BoxOfficeMillions', 'IMDB_Rating'])
    
    try:
        prediction = model.predict(input_data)[0]
        proba = model.predict_proba(input_data)[0]
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        result = "üåü –ò–∫–æ–Ω–Ω–∞—è" if prediction == 1 else "üí´ –ù–µ –∏–∫–æ–Ω–Ω–∞—è"
        probability = f"{max(proba)*100:.1f}%"
        
        st.markdown(f"""
        <div style='background:#f8f9fa;padding:1.5rem;border-radius:10px;text-align:center;margin:1rem 0;'>
            <h3 class="result-text">{result}</h3>
            <p class="probability-text">–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: <strong>{probability}</strong></p>
        </div>
        """, unsafe_allow_html=True)

        # –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        fig, ax = plt.subplots(figsize=(4, 3))
        sns.barplot(x=['–ù–µ –∏–∫–æ–Ω–Ω–∞—è', '–ò–∫–æ–Ω–Ω–∞—è'], y=proba, palette="viridis", ax=ax)
        ax.set_ylabel("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å")
        plt.tight_layout()
        
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=120, bbox_inches='tight')
        plt.close(fig)
        buf.seek(0)
        st.image(buf, use_container_width=True)
        
    except Exception as e:
        st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç–∞—Å–µ—Ç–µ
st.markdown("---")
st.markdown("### üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç–∞—Å–µ—Ç–µ")
st.write(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}")
st.write(f"–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
st.dataframe(data.head(3))

# –°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
st.markdown("### üí° –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∏–Ω—Ü–µ—Å—Å—É –∏–∫–æ–Ω–∏—á–µ—Å–∫–æ–π?")
st.markdown("""
- üé∂ **–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –ø–µ—Å–µ–Ω** (–∏–¥–µ–∞–ª—å–Ω–æ 4+)
- üé§ **–°–æ–ª—å–Ω–∞—è –ø–µ—Å–Ω—è** –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å—ã
- üí∞ **–ö–∞—Å—Å–æ–≤—ã–µ —Å–±–æ—Ä—ã** > $500 –º–ª–Ω
- ‚≠ê **–†–µ–π—Ç–∏–Ω–≥ IMDB** –≤—ã—à–µ 7.5
""")